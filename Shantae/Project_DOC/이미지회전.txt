
< 0 = 세타 >

x * cos0, x * sin0

높이가 y인 사각형을 0만큼 회전했을 때, 회전한 사각형의 높이를 기준으로 삼각형을 그린다.
그 삼각형의 빗변은 회전하기 전의 사각형의 높이 y와 같다.
그 삼각형을 회전한 사각형의 왼쪽 x축으로 옮겨서 각을 계산해보면, 삼각형의 윗 각도가 40도인 것을 알 수 있게 된다.

삼각형의 윗쪽 각도를 기준으로 하여 반시계방향으로 회전시켜 원점으로 옮겨보면, 0가 40도인 것을 알 수 있다.
이때, 원점에서 삼각형까지 빗변(이었던) y만큼 이동한 부분의 점은

y * cos0, y * sin0

가 된다.

실제로는 삼각형이 반시계로 회전하지 않은 상태이기 때문에, 다시 원상태로 복구해서 생각해보면
높이가 y * cos0, 밑변이 y * sin0, 빗변이 y인 삼각형이라는 것을 알 수 있다.

이 값들을 이용해서 회전된 벡터의 값을 알 수 있다.

x * cos0 - y * sin0
x * sin0 + y * sin0

이것이 회전됐을 때의 값이다.

따라서 함수는 다음과 같이 이뤄질 수 있다.

	void RotaitonZRad(float _Rad)
	{
		float4 Copy = *this;
		x = Copy.x * cosf(_Rad) - Copy.y * sinf(_Rad);
		y = Copy.x * sinf(_Rad) + Copy.y * cosf(_Rad);
	}


- 일반적인 사각형을 기준으로 봤을 때, 네 꼭짓점은 모두 중심(원점)으로부터 뻗어나온 네 개의 벡터로 볼 수 있다.

- 필터이미지 만드는 법
  레이어 복제 > 따로저장 > 흰색(쓸곳), 검은색(안쓸곳) 칠 > 이미지 > 모드 > 회색음영 > 이미지 > 모드 > 비트맵 > 파일 저장(1비트)