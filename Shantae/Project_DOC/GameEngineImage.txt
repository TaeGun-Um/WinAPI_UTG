
 - 이미지란?
   컴퓨터가 파일, 데이터 등 어떤 크기를 지니고 있다는 것은, 특정 저장소 공간에 bit의 집합으로 존재한다는 뜻이다.

   모든 이미지는 2가지만 기억하면 됩니다.
    1. 포멧 색깔 하나를 몇바이트를 써서 표현했는가?
       모든 색깔은 RGBA를 통해서 표현된다.
       각 R, G, B, A 1개당 몇바이트를 써서 표현하는 지가 포멧이다.
       Bitmap 포멧은 RGBA를 보통 하나에 1바이트로 표현한다.

    2. 압축방식
       bitmap은 압축을 하지 않는다.

       PNG, JPG는 압축을 한다.
       PNG에서 일련의 동일한 색상이 10개 존재한다고 가정했을 때, 10개가 모두 빨강이라면
       원래는 픽셀 열 칸에 [빨강/빨강/빨강/빨강/빨강/빨강/빨강/빨강/빨강/빨강] 이 들어가겠지만(40byte)
       압축을 실시했을 경우 [빨강, 10개, 색상정보] 이 세 가지를 파일에 저장하는 것이다(12byte).
       

- int는 4바이트 정수형 자료형으로, 8bit 네 개로 쪼갤 수 있다.
  char가 네 개 존재할 수 있다는 뜻이다.
  unsinged char는 0~255까지의 수를 표현할 수 있다.
                     R   G  B  A
  char Color[4] = { 255, 0, 0, 0 };을 선언한 뒤, 해당 배열을 int 포인터 변수로 해석하면
  32bit 조합의 Color 정보를 담고 표현할 수 있다.

  ex) char Color[4] = { 255, 0, 0, 0 }; 는 빨강을 뜻함.
      A는 투명도를 뜻한다.


- Bitmap을 사용한다는 것은 메인 메모리에 1062x1380(Heros.bmp 파일 예시)짜리 2차원 int 배열을 가지고 있는 것이다.
  >> int ArrBitMap[1380][1062]라는 뜻


- 윈도우(창) 생성을 활용하면 이런 2차원 int 배열 정보를 윈도우가 관리하는 것이다.
  이때부터 배열에 대해 뭔가를 할 수 있는 권한을 주는데, 그것이 바로 HDC이다.
  HDC는 색깔의 배열(2차원 int 배열)과 연결되어 있으며, 그걸 제어할 수 있게 도와주는 통로이다.


- HBITMAP : 비트 패턴을 저장하기 위한 Bitmap Object의 핸들 값
  HPEN    : 선의 속성을 저장하기 위한 Pen Object의 핸들 값
  HBRUSH  : 채우기 속성을 저장하기 위한 Brush Object의 핸들 값
  HFONT   : 글꼴 속성을 저장하기 위한 Font Object의 핸들 값
  DC      : Device Context


- BITMAP : 구조체
  
  typedef struct tagBITMAP
  {
    LONG        bmType;
    LONG        bmWidth;
    LONG        bmHeight;
    LONG        bmWidthBytes;
    WORD        bmPlanes;
    WORD        bmBitsPixel;
    LPVOID      bmBits;
  } BITMAP, *PBITMAP, NEAR *NPBITMAP, FAR *LPBITMAP;


- LoadImageA() : https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-loadimagea

  아이콘, 커서, 애니메이션 커서 또는 비트맵을 로드한다.
  함수가 성공하면 반환 값은 새로 로드된 이미지의 핸들이다.

  1번인자   : 로드할 이미지가 포함된 DLL 또는 실행 파일(.exe)의 모듈에 대한 핸들, 독립 실행형 리소스(아이콘, 커서 또는 비트맵 파일)(예: c:\myimage.bmp)를 로드하려면 이 매개 변수를 NULL 로 설정.
  2번인자   : 로드할 이미지 경로
  3번인자   : 로드할 이미지 유형, IMAGE_BITMAP == 비트맵 로드
  4~5번인자 : 로드할 이미지 범위 지정, 0, 0은 모두 로드 // 4 : 아이콘 또는 커서의 너비(픽셀), 5 : 아이콘 또는 커서의 높이(픽셀)
  6번인자   : lpszName(2번) 으로 지정된 파일 (아이콘, 커서 또는 비트맵 파일) 에서 독립 실행형 이미지를 로드


- CreateCompatibleDC() : https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-createcompatibledc
  본인 프로그램의 HDC를 넣어줘야 하지만, nullptr을 넣어줘도 된다.

  지정된 장치와 호환되는 메모리 디바이스 컨텍스트(DC)를 만든다. 함수가 성공하면 반환 값은 메모리 DC에 대한 핸들.
  인자 : 기존 DC에 대한 핸들, 이 핸들이 NULL 이면 함수는 애플리케이션의 현재 화면과 호환되는 메모리 DC를 만든다.

  메모리 DC는 메모리에만 존재합니다. 메모리 DC가 생성될 때 디스플레이 표면은 정확히 1개의 단색 픽셀 너비와 1개의 단색 픽셀 높이입니다. 
  응용 프로그램이 그리기 작업에 메모리 DC를 사용하려면 먼저 올바른 너비와 높이의 비트맵을 DC로 선택해야 합니다.
  비트맵을 DC로 선택하려면 CreateCompatibleBitmap 함수를 사용하여 필요한 높이, 너비 및 색상 구성을 지정합니다.

- 메모리 디바이스 컨텍스트 : https://learn.microsoft.com/ko-kr/windows/win32/gdi/memory-device-contexts
  
  메모리 DC,
  애플리케이션이 실제 디바이스로 출력을 보내는 대신 메모리에 출력을 배치할 수 있도록 하려면 메모리 디바이스 컨텍스트라는 
  비트맵 작업에 특별한 디바이스 컨텍스트를 사용합니다. 메모리 DC를 사용하면 시스템에서 메모리의 일부를 가상 디바이스로 처리할 수 있습니다.
  애플리케이션이 일시적으로 사용하여 일반 그리기 화면에서 만든 비트맵의 색 데이터를 저장할 수 있는 메모리의 비트 배열입니다. 
  비트맵은 디바이스와 호환되므로 메모리 DC를 호환되는 디바이스 컨텍스트라고도 합니다.

  메모리 DC는 특정 디바이스에 대한 비트맵 이미지를 저장합니다. 애플리케이션은 CreateCompatibleDC 함수를 호출하여 메모리 DC를 만들 수 있습니다.

  메모리 DC의 원래 비트맵은 단순히 자리 표시자입니다. 해당 차원은 1픽셀씩 1픽셀입니다. 애플리케이션이 그리기를 시작하기 전에 SelectObject 함수를 
  호출하여 DC에 적절한 너비와 높이의 비트맵을 선택해야 합니다. 적절한 차원의 비트맵을 만들려면 CreateBitmap, CreateBitmapIndirect 또는 
  CreateCompatibleBitmap 함수를 사용합니다. 비트맵을 메모리 DC로 선택한 후 시스템은 단일 비트 배열을 지정된 픽셀 사각형에 대한 색 정보를 
  저장할 수 있을 만큼 큰 배열로 바꿉니다.

  애플리케이션이 CreateCompatibleDC 에서 반환한 핸들을 그리기 함수 중 하나에 전달하면 요청된 출력이 디바이스의 드로잉 화면에 표시되지 않습니다.
  대신 시스템은 결과 선, 곡선, 텍스트 또는 영역의 색 정보를 비트 배열에 저장합니다. 애플리케이션은 BitBlt 함수를 호출하고 메모리 DC를 원본 
  디바이스 컨텍스트로 식별하고 창 또는 화면 DC를 대상 디바이스 컨텍스트로 식별하여 메모리에 저장된 이미지를 드로잉 화면에 다시 복사할 수 있습니다.


- 이미지를 로드만 하면(Bitmap = ImageLoadA()) 바로 사용할 순 없다. 로드하면 바로 HDC가 생성되는 것이 아니기 때문이다.
  로드 시, 로드한 이미지의 HBITMAP 색깔 집합만 받게 되는데, 이것만으로는 무언가를 그릴 수 없다.
  항상 윈도우에 무언가를 그리기 위해서는 HDC가 필요하다.

  이미지만 로드했을 때에는 색깔 집합만 받을 뿐이며, HDC는 받지 못하기 때문에 SetObject()함수를 콜해서 DC에 색깔 집합(BitMap)을 넣어주는 것이다.
  색깔 정보를 그릴 수 있는 권한을 얻기 위해서 그냥 DC를 만들고(CreateCompatibleDC), 그 안에 색깔 집합(BitMap)을 넣는다

  이후 새로운 날것의 HDC가 만들어졌을 때의 정보값이 리턴되며, 이것을 OldBitmap에 저장해둔 것이다.
  날것의 HDC 색깔 집합은 1x1 픽셀


- SelectObject() : https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-selectobject#parameters
  
  DC에 저장된 GDI Object의 핸들 값을 변경할 때 사용
  예를 들어, 기본 DC를 사용하여 사각형을 그리면 검은색 테두리에 내부가 흰색으로 채워진 사각형이 그려진다.
  그런데 내부가 흰색이 아닌 파란색으로 채워지는 사각형을 그리고 싶다면, 파란색 Brush 객체를 새로 만들어서 DC에 저장된 Brush 객체와 교체해야 한다.
  이럴 때 사용하는 함수가 SelectObject

  지정된 디바이스 컨텍스트(DC)로 개체를 선택. 새 개체는 동일한 유형의 이전 개체를 대체
  1번인자 : GDI Object를 교체할 DC의 핸들 값
  2번인자 : 새롭게 설정할 GDI Object의 핸들 값

  비트맵은 메모리 DC로만 선택할 수 있습니다. 단일 비트맵을 동시에 둘 이상의 DC로 선택할 수 없습니다.
  함수는 GDI Object 교체 작업이 성공하면 DC가 이전에 사용하고 있던 GDI Object의 핸들값을 반환

  예를 들어, 0x3000의 HBRUSH를 교체하는 경우, 새로 만든 Brush 핸들 값이 0x1000라면,
  HBRUSH는 0x1000으로 교체, 반환은 0x3000으로 실시


- GetObject() : https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-getobject
  
  지정된 그래픽 개체에 대한 정보를 검색
  1번인자 : 정보를 빼낼 데이터
  2번인자 : 데이터의 크기
  3번인자 : 빼낸 정보를 저장할 변수

  함수가 성공하고 lpvObject 가 유효한 포인터인 경우 반환 값은 버퍼에 저장된 바이트 수


- BitBlt() : https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-bitblt

  지정된 소스 DC에서 대상 DC로 픽셀의 사각형에 해당하는 색상 데이터의 비트 블록 전송을 수행

  특정 HDC 정보를 다른 HDC 정보에 복사하는 함수이다
  이미지 정보를 수정하는 기능은 없다.

  1번인자   : 대상의 HDC
  2~3번인자 : 대상의 시작점
  4~5번인자 : 대상, 복사할 이미지 시작점부터의 사각형
  6번인자   : 복사할 HDC
  7~8번인자 : 복사할 이미지 시작점
  9번인자   : 래스터 연산 코드. 최종 색상을 얻기 위해 소스 사각형의 색상 데이터를 대상 사각형의 색상 데이터와 결합하는 방법을 정의. SRCCOPY == 복사


- TransparentBlt() : https://learn.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-transparentblt

 지정된 소스 DC에서 대상 DC로 픽셀의 직사각형에 해당하는 색상 데이터의 비트 블록 전송을 수행

  특정 HDC 정보를 다른 HDC 정보에 복사하는 함수이다.
  BitBlt()과는 다르게 이미지 정보를 수정할 수 있다.

  TransparentBlt()의 마지막 인자 [int Color]는 해당 RGB 값을 가지는 Color는 HDC 정보에서 제외하라는 뜻이다.

  기본적으로 windows가 지원하는 함수가 아니기 때문에 pragma comment()를 활용하여 다른 lib를 사용하겠다 선언해야한다.
  TransparentBlt()는 msimg32.lib를 참조해야 한다.
  #pragma comment(lib, "msimg32.lib")

  msimg32.lib 나 다른 라이브러리에 대한 정보는 [속성 -> 구성 플랫폼 Release x64 선택 -> 참조 디렉터리 -> 편집 -> 링크]에서 확인할 수 있다.

  1번인자    : 대상의 HDC
  2~3번인자  : 대상 시작점
  4~5번인자  : 대상 시작점부터의 사각형
  6번인자    : 복사할 HDC
  7~8번인자  : 복사할 이미지 시작점
  9~10번인자 : 복사할 이미지 시작점부터의 사각형
  11번인자   : 제외할 Color(int)


- Cut 함수의 사용

  Cut 함수는 정렬된 상태로 나열된 이미지 좌표를 저장하는 용도로 활용한다.
  이미지가 정렬된 상태가 아니라면, 포토샵을 이용하여 이미지를 수정할 수 있도록 한다.

  Cut 함수 실행 조건으로, 이미지가 몇 개 존재하는지(X), 이미지가 다른 축으로도 존재하는지(X, Y), 이미지 파일이 X, Y로 나눌 수 있는지(정수로 나눗셈 가능?) 알아야 한다.
 
  1. 이미지의 HDC 정보를 ImageLoad 함수로 저장한 뒤, 해당 이미지가 정렬된 이미지라면 cut 함수로 이미지의 좌표를 vector 배열에 저장한다.
  2. ImageCutData는 GameEngineImage에 선언된 구조체로, 구성은 다음과 같다.

  struct ImageCutData
  {
  	  float StartX = 0.0f;
	  float StartY = 0.0f;
	  float SizeX = 0.0f;
	  float SizeY = 0.0f;

   	  float4 GetStartPos()
	  {
		  return { StartX, StartY };
	  }

	  float4 GetScale()
	  {
		  return { SizeX, SizeY };
	  }
  };

  StartX, Y == 이미지의 시작점
  SizeX, Y  == 이미지의 시작점 기준으로 떨어져있는 X, Y
  >> Start와 Size를 알면 나열된 이미지를 하나로 잘라낼 수 있게 된다.
  
  [ㅁ][ㅇ][ㄴ][ㄹ] 이런 이미지라면

  시작    1     2      3      4
  / [ㅁ] / [ㅇ] / [ㄴ] / [ㄹ] / 이런 식으로 정보를 담는 것.

  3. 위처럼 한줄로 네 개의 이미지가 연속으로 나열된 이미지라면, Cut(4, 1)을 호출하면 된다.
  4. HDC info에 저장한 너비와 높이(GetImageScale 호출)를 4와 1로 나눈 뒤, ImageData.SizeX, ImageData.SizeY에 저장
  5. 다음으로 반복문(whlie)을 돌며 ImageData.StartX, ImageData.StartY에 값을 저장한 뒤, ImageData벡터에 순서대로 pushback 실시
  6. cut이 완료된 이미지는 Iscut을 true로 변경해준다.