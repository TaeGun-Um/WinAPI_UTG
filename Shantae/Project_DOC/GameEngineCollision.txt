
- 충돌함수와 충돌 구조는 다르다. 현재 프로젝트에서 오브젝트는 액터다.
  현재 오브젝트를 새로 New하거나 delete해서 사용하지 않고 Create 할 시 자료구조에 넣어둔 후 안전하게 호출하여 사용하고 있다.

  충돌구조도 액터의 보관, 호출 방식과 똑같이 사용할 예정이다.
  마찬가지로 자료구조 안에 충돌체들을 모아둘 예정

  대부분의 충돌은 우리가 모르는 구조에서 충돌을 한 뒤 신호가 오는 것이다.
  이 구조를 Collision이라고 하는데, 선생님은 해당 구조를 싫어한다(즉각적인 반응이 오는 것을 좋아함)

  충돌은 액터의 업데이트 도중 발생하도록 인터페이스를 구성할 것이다.
  Render와 마찬가지로, Start에서 만들어진 후 자료구조에 저장할 것.

- Collision 스스로는 Getorder를 통해 자신이 어떤 그룹으로 지정되어 GELevel.map에 저장되어 있는지 아는 상황이다.
  따라서 GECollision에 Collision이라는 함수를 만든 뒤, bool값을 이용하여 true가 되면 충돌했다는 느낌으로 작성할 것이다.

- 충돌체 디버깅용 랜더 과정을 GELevel.cpp에 구현한다.

	{
		if (true == IsDebugRender) << IsDebugRender가 true일 경우 윈도우창에 랜더링된다.
		{
			std::map<int, std::list<GameEngineCollision*>>::iterator GroupStartIter = Collisions.begin();
			std::map<int, std::list<GameEngineCollision*>>::iterator GroupEndIter = Collisions.end();

			for (; GroupStartIter != GroupEndIter; ++GroupStartIter)
			{
				std::list<GameEngineCollision*>& CollisionList = GroupStartIter->second;
				std::list<GameEngineCollision*>::iterator CollisionIterStart = CollisionList.begin();
				std::list<GameEngineCollision*>::iterator CollisionIterEnd = CollisionList.end();

				for (; CollisionIterStart != CollisionIterEnd; ++CollisionIterStart)
				{
					GameEngineCollision* DebugCollision = *CollisionIterStart;
					if (nullptr == DebugCollision || false == DebugCollision->IsUpdate())
					{
						continue;
					}
					DebugCollision->DebugRender();
				}
			}
		}
	}

	해당 코드를 on, off하여 디버깅에 사용할 수 있도록 함

- SetDebugRenderType()
  특정 충돌체로 보고싶다면 랜더링하기전에 호출해서 값을 고정하도록 한다.