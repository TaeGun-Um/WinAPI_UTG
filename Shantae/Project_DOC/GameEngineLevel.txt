
- 상위 레벨은 하위 레벨을 알면 안되기 때문에, 다음과 같이 생성할 수는 없다.
  
  std::list<Player*> Actors;
  std::list<Monster*> Actors;
  std::list<Background*> Actors;

  하나의 자료형으로 모든 화면 내에 등장하는 액터들을 표현할 수 있도록 한다.
  std::list<GameEngineActor*> Actors;


- Level에서 Actors를 저장하는 자료구조를 map으로 바꾼다.
  몇 번째 인덱스나 순서에 접근해서 데이터를 불러오는 것은 맵보다 벡터가 빠르지만, 우리는 현재 Key를 문자열로 관리하고 있기 때문에
  원하는 숫자를 할당해서 관리하는 것이 가능하다.

  또한 map은 순회를 돌면 오름차순으로 정렬된다. 따라서 숫자가 더 클 수록 나중에 실행된다.

  이러한 map의 이점을 활용할 수 있는 문법이 존재한다. 마치 맵을 문자열처럼 활용할 수 있다.
  >> map변수[인덱스번호]
  이를 실행했을 때, 존재한다면        == insert 실행, 찾아보고 없으면 [인덱스번호]에 해당하는 pair를 만들어 저장한다.
                   존재하지 않는다면 == find 실행, 저장된 데이터의 레퍼런스까지 모두 리턴해준다.



- 슬래쉬(/)를 세 번 치면 다음과 같은 형식이 나타난다.

  /// <summary>
  ///
  /// </summary>

  해당 형식을 이용하면 다른 파일에서 해당 형식이 존재하는 함수를 확인했을 때, 주석에 적힌 정보를 확인할 수 있다.
  활용ex)

  /// <summary>
  /// 액터를 만드는 함수
  /// </summary>
  /// <typeparam name="ActorType"> GameEngineActor를 상속받은 클래스 타입 </typeparam>
  /// <param name="_Order"> Actor의 업데이트 순서 숫자가 작을수록 먼저 업데이트 됩니다. </param>