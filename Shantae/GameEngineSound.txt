
- ThirdParty

  미드웨어나 서드파티같은 단어가 종종 언급된다.
  서드파티란, 내가 만든 기능이 아닌 제 3자가 만든 그룹(제 3자의 프로젝트)을 뜻한다.

- FMOD

  서드파티 중 Sound에 관한 기능을 가지고 있는 SDK(소프트웨어 개발 키드; Software development kit) 그룹.
  wav, mp3, ogg 등의 형식인 파일을 활용할 수 있다.

  FMOD에 가입한 후 api > core 폴더 내 lib과 x64 폴더의 파일들을 본인의 프로젝트에 가져오면 된다.

  기본적으로 lib(라이브러리 파일)은 #pragma comment(lib, "GameEngineCore.h")
  와 같은 형식으로 사용하는 것이 정석이지만, 우리는 비주얼 스튜디오가 지원해주고 있기 때문에 #include <GameEngineBase/GemeEngineCore.h>
  와 같이 간편하게 사용이 가능한 상황이다.

  그래도 FMOD는 정석으로 #pragma comment(lib, "경로") 를 활용하도록 한다.

- hpp 확장자와 h 확장자
  #include <GameEnginePlatform/ThirdParty/FMOD/inc/fmod.hpp>

  본래 정석 cpp 헤더 확장자 명칭은 hpp이다.
  cpp는 c 프로그래머들을 흡수하기 위해 c에서 지원하는 형식을 가져다 썼기 때문에, 자연스레 c 프로그래머들은 헤더를 h 확장자로 활용했다.
  그래서 잘 안씀. 그래도 정석이니 알고있도록 한다.

  해당 프로젝트에서는 hpp 스타일을 활용할 것이다.
  참고로 hpp 헤더를 활용하면 모든 변수가 멤버변수화 되기 때문에 전역을 활용하진 못한다.
  + hpp와 h에서 모든걸 비교해봤기 때문에 일반 재생에서는 차이가 없다는 사실을 알고 있다.
    앞으로 서드파티 그룹을 활용하고자 한다면, 이런 세세한 차이를 주의깊게 살피고 활용할 수 있도록 습관을 들이는 것이 좋다.

- 추가

  GameEnginePlatform 폴더 내에 ThirdParty > FMOD 폴더를 만든 후, FMOD 폴더에 bin과 inc 폴더를 추가한다.
  bin 폴더에는 core 폴더에서 가져온 x64 폴더 내부 파일을 넣어주고 inc 폴더에는 core 폴더에서 가져온 inc 폴더 내부 파일을 넣어준다.
  다음으로 ThirdParty > FMOD > header, bin 필터를 추가한 뒤, bin에는 bin 폴더 내부 파일을, header에는 inc 폴더 내부 파일을 드래그 앤 드롭 해준다.

  dll이나 lib은 비주얼 스튜디오가 기본적으로 Git이 무시되도록 설정한 상태이기 때문에, 해당 파일들에 대해 우클릭 > Git > 추가 를 실시해줘야 한다.

  다음으로 F5(실행 or 디버그)를 눌렀을 때, 파일이 bin 폴더에 생성될 수 있도록 해야한다.
  - fmod_vc.lib, fmodL_vc.lib 파일은 속성에서, 빌드에서 제외 : 예 / 항목형식 : 라이브러리
    fmod.dll, fmod_vc.dll 파일은 속성에서, 빌드에서 제외 : 아니오 / 항목형식 : 파일 복사

    실제적으로 lib은 dll을 실행하라는 코드가 들어있어야 한다.
    F5를 눌렀을 때 실행되는 곳(exe 파일이 만들어지는 곳)은 Bin>x64>debug 내의 파일들이다. 그곳에 fmod.dll이 존재해야 한다는 뜻이다.
    그래서 fmod.dll의 속성, 모든 구성 모든 플랫폼에서 항목형식 '파일 복사' << 빌드될 때 해당 파일이 생성되는 곳에 자신을 복사해버림

  - 각 프로젝트에 속성에서(일단 GameEningPlatform만 해도 된다.), 라이브러리 디렉터리 경로를 변경해준다(포함 디렉터리와 동일하게 ;..\ 추가).
    포함 디렉터리는 헤더 관련 추가를 지원, 라이브러리 디렉터리는 lib 관련 추가를 지원

    여기까지 완료했다면 정상적으로 FMOD 관련 기능을 사용할 수 있게 된다.


- fmod.dll, fmod_vc.dll

  fmod_vc는 디버그 모드에서 지원, fmod는 릴리즈 모드에서 지원된다. vc로 활용하면 추가적인 정보를 로그로 출력해준다.
